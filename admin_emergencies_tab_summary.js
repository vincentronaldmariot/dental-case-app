const axios = require('axios');

const ONLINE_SERVER_URL = 'https://afp-dental-app-production.up.railway.app';

async function adminEmergenciesTabSummary() {
  try {
    console.log('üîç Admin Emergencies Tab - Current Status Summary\n');

    // Step 1: Login as admin
    console.log('1Ô∏è‚É£ Logging in as admin...');
    const adminLoginResponse = await axios.post(`${ONLINE_SERVER_URL}/api/auth/admin/login`, {
      username: 'admin',
      password: 'admin123'
    });

    const adminToken = adminLoginResponse.data.token;
    console.log('‚úÖ Admin logged in');

    // Step 2: Test emergency records endpoint
    console.log('\n2Ô∏è‚É£ Testing emergency records endpoint...');
    try {
      const emergencyResponse = await axios.get(`${ONLINE_SERVER_URL}/api/admin/emergency`, {
        headers: { Authorization: `Bearer ${adminToken}` }
      });

      console.log('‚úÖ Emergency records endpoint working');
      console.log(`üìä Found ${emergencyResponse.data.emergencyRecords?.length || 0} emergency records`);

    } catch (error) {
      console.log('‚ùå Emergency records endpoint failing');
      console.log(`   Error: ${error.response?.status} - ${error.response?.data?.error || error.message}`);
    }

    // Step 3: Test emergency status update
    console.log('\n3Ô∏è‚É£ Testing emergency status update...');
    try {
      const emergencyResponse = await axios.get(`${ONLINE_SERVER_URL}/api/admin/emergency`, {
        headers: { Authorization: `Bearer ${adminToken}` }
      });

      const emergencyRecords = emergencyResponse.data.emergencyRecords || [];
      
      if (emergencyRecords.length > 0) {
        const testRecord = emergencyRecords[0];
        console.log(`üìã Testing with record: ${testRecord.id}`);

        const updateResponse = await axios.put(
          `${ONLINE_SERVER_URL}/api/admin/emergency/${testRecord.id}/status`,
          {
            status: 'inProgress',
            handledBy: 'Dr. Admin Test',
            notes: 'Test status update'
          },
          {
            headers: { Authorization: `Bearer ${adminToken}` }
          }
        );

        console.log('‚úÖ Emergency status update working');
        console.log('Response:', updateResponse.data);

      } else {
        console.log('‚ö†Ô∏è No emergency records to test with');
      }

    } catch (error) {
      console.log('‚ùå Emergency status update failing');
      console.log(`   Error: ${error.response?.status} - ${error.response?.data?.error || error.message}`);
    }

    console.log('\nüìã ADMIN EMERGENCIES TAB STATUS:');
    console.log('');
    console.log('üî¥ CURRENT ISSUES:');
    console.log('   1. Emergency records table missing 8 columns:');
    console.log('      ‚Ä¢ status');
    console.log('      ‚Ä¢ priority');
    console.log('      ‚Ä¢ handled_by');
    console.log('      ‚Ä¢ resolution');
    console.log('      ‚Ä¢ follow_up_required');
    console.log('      ‚Ä¢ resolved_at');
    console.log('      ‚Ä¢ emergency_contact');
    console.log('      ‚Ä¢ notes');
    console.log('');
    console.log('   2. Admin emergency query fails with 500 error');
    console.log('   3. Admin emergencies tab shows no data');
    console.log('');
    console.log('üü° FRONTEND STATUS:');
    console.log('   ‚Ä¢ Emergencies tab exists in admin dashboard ‚úÖ');
    console.log('   ‚Ä¢ Tab controller configured correctly ‚úÖ');
    console.log('   ‚Ä¢ Emergency service implemented ‚úÖ');
    console.log('   ‚Ä¢ Emergency record model complete ‚úÖ');
    console.log('');
    console.log('üü° BACKEND STATUS:');
    console.log('   ‚Ä¢ Emergency routes implemented ‚úÖ');
    console.log('   ‚Ä¢ Admin emergency endpoints exist ‚úÖ');
    console.log('   ‚Ä¢ Status update endpoint exists ‚úÖ');
    console.log('   ‚Ä¢ Database schema incomplete ‚ùå');
    console.log('');
    console.log('üîß REQUIRED FIXES:');
    console.log('   1. Update emergency_records table schema');
    console.log('   2. Add missing columns to database');
    console.log('   3. Deploy schema changes to Railway');
    console.log('   4. Test emergency records functionality');
    console.log('');
    console.log('üìù NEXT STEPS:');
    console.log('   1. Create database migration script');
    console.log('   2. Update setup_railway_db.js with complete schema');
    console.log('   3. Deploy to Railway');
    console.log('   4. Test admin emergencies tab');
    console.log('   5. Verify emergency record creation and management');

  } catch (error) {
    console.error('‚ùå Summary failed:', error.response?.data || error.message);
  }
}

adminEmergenciesTabSummary(); 